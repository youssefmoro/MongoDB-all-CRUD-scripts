Microsoft Windows [Version 10.0.19045.4529]
(c) Microsoft Corporation. All rights reserved.

C:\Windows\system32>show dbs
'show' is not recognized as an internal or external command,
operable program or batch file.

C:\Windows\system32>mongo
'mongo' is not recognized as an internal or external command,
operable program or batch file.

C:\Windows\system32>mongosh
Current Mongosh Log ID: 6687702a90203f306dcc8987
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.2.10
Using MongoDB:          7.0.12
Using Mongosh:          2.2.10

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting
   2024-07-05T00:32:03.586+03:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

test> show dbs
admin            40.00 KiB
config           72.00 KiB
local            72.00 KiB
yousefLearning  112.00 KiB
test> show collections

test> use yousefLearning
switched to db yousefLearning
yousefLearning> show collections
student
user
yousefLearning> db.students.insert({_id:10,name:"YousefMohamedMoro",schools:["modern","portsaid","Abdelwahab"]},{name:"yousef"},{secondName:"Moro"})
DeprecationWarning: Collection.insert() is deprecated. Use insertOne, insertMany, or bulkWrite.
{ acknowledged: true, insertedIds: { '0': 10 } }
yousefLearning> db.students.find({})
[
  {
    _id: 10,
    name: 'YousefMohamedMoro',
    schools: [ 'modern', 'portsaid', 'Abdelwahab' ]
  }
]
yousefLearning> db.students.insertMany({_id:10,name:"YousefMohamedMoro",schools:["modern","portsaid","Abdelwahab"]},{name:"yousef"},{secondName:"Moro"})
MongoInvalidArgumentError: Argument "docs" must be an array of documents
yousefLearning> db.students.insertMany([{_id:10,name:"YousefMohamedMoro",schools:["modern","portsaid","Abdelwahab"]},{name:"yousef"},{secondName:"Moro"}])
Uncaught:
MongoBulkWriteError: E11000 duplicate key error collection: yousefLearning.students index: _id_ dup key: { _id: 10 }
Result: BulkWriteResult {
  insertedCount: 0,
  matchedCount: 0,
  modifiedCount: 0,
  deletedCount: 0,
  upsertedCount: 0,
  upsertedIds: {},
  insertedIds: {}
}
Write Errors: [
  WriteError {
    err: {
      index: 0,
      code: 11000,
      errmsg: 'E11000 duplicate key error collection: yousefLearning.students index: _id_ dup key: { _id: 10 }',
      errInfo: undefined,
      op: {
        _id: 10,
        name: 'YousefMohamedMoro',
        schools: [ 'modern', 'portsaid', 'Abdelwahab' ]
      }
    }
  }
]
yousefLearning> db.students.insertMany([{_id:50,name:"YousefMohamedMoro",schools:["modern","portsaid","Abdelwahab"]},{name:"yousef"},{secondName:"Moro"}])
{
  acknowledged: true,
  insertedIds: {
    '0': 50,
    '1': ObjectId('668772d090203f306dcc898a'),
    '2': ObjectId('668772d090203f306dcc898b')
  }
}
yousefLearning> db.students.find()
[
  {
    _id: 10,
    name: 'YousefMohamedMoro',
    schools: [ 'modern', 'portsaid', 'Abdelwahab' ]
  },
  {
    _id: 50,
    name: 'YousefMohamedMoro',
    schools: [ 'modern', 'portsaid', 'Abdelwahab' ]
  },
  { _id: ObjectId('668772d090203f306dcc898a'), name: 'yousef' },
  { _id: ObjectId('668772d090203f306dcc898b'), secondName: 'Moro' }
]
temp> db.employee.insertOne({Name:"temp"})
{witched to db temp
  acknowledged: true,
  insertedId: ObjectId('6687735d90203f306dcc898c')
}
temp> db.temp.show collections
Uncaught:
SyntaxError: Missing semicolon. (1:12)

> 1 | db.temp.show collections
    |             ^
  2 |

temp> show collections
employee
temp> show dbs
admin            40.00 KiB
config           96.00 KiB
local            72.00 KiB
temp              8.00 KiB
yousefLearning  184.00 KiB
temp> db.dropDatabase()
{ ok: 1, dropped: 'temp' }
temp> show dbs
admin            40.00 KiB
config           96.00 KiB
local            72.00 KiB
yousefLearning  184.00 KiB
temp> use student
switched to db student
student> show collections

student> use students
switched to db students
students> use yousefLearning
switched to db yousefLearning
yousefLearning> show collections
student
students
user
yousefLearning> use student
switched to db student
student> use yousefLearning
switched to db yousefLearning
yousefLearning> db.student.drop()
true
yousefLearning> show collections
students
user
yousefLearning>